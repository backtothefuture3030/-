
# 주석표현은 #으로 표시한다.

# 자료형(Data Type) : 프로그래밍을 할 때 쓰이는 숫자, 문자열 등등의 것들을 뜻한다.

# 자료형의 종류: 숫자형, 문자열, 리스트, 튜플, 딕셔너리, 집합, 불린(boolean), 변수


# 1)숫자형(크게 두가지로 분류한다면 : 정수형(integer), 부동소수점(float)
#   정수 : 12432
#   실수 : 123.45
#   복소수 : 1+10i
#   8진수 : 0o25
#	16진수 : 0x2F

aa = 124 #정수형은 파이썬에서 long형이 따로 없이 모든 정수는 int형으로 담을 수 있다.
aa = -154
aa = 0

print(aa)

bb = 23.22 # 부동소수점
bb = 32.4E-3 # E표기법 : E뒤의 값이 10지수임을 표현 --> 32.4*10^-3을 의미

cc = 0o166 # 8진수 표기법

dd = 0xabc # 16진수 표기법

''' 
   숫자 연산 : 사칙연산(+,-,*,/)을 계산기와 마찬가지로 사용한다.

   ** : 승(제곱) 값을 나타내는 연산자
   % : 나머지값을 반환하는 연산자 (걍 나누고 나머지값 알려주는거임)
   // : 소수점자리를 버리는 연산자
'''

a = 10
b = 10
c = 100

print (a+b)
print (a**b)

print(5%2)
print(2%5)

print(3/2)
print(3//2)



# 2)문자열 : 문자의 나열을 의미한다. (문자들의 집합)
# 작은 따옴표를 이용해서 문자열을 지정할 수 있다. 예>'헬로 파이썬!!'
# 공백과 띄어쓰기 탭등이 그대로 유지된다.

# 큰따옴표 : 작은 따옴표로 둘러싸인 문자열과 완전히 동일하게 취급된다.
# 예>"Hello Python!!" 
# 큰따옴표안에 작은 따옴표를 포함할 수 있다.
# 예> "I'm ok!!"
print("I'm ok!!")

# 세개의 따옴표 표현하는 경우 -(""" 또는 ''')
# 세개의 따옴표를 사용하는 경우는 여러 라인에 걸친 문자열을 표현할 때 사용한다.

'''안녕하세요!!!
반갑습니다....
'''

print(''' 안녕하세요 
반가워요
또 만납시다!!!''')	

""" 반갑습니다...
만나뵈서 ...즐거웠습니다...!!!
"""

''' 파이썬에서는 문자형(char(캐릭터)형)이 따로없다. 파이썬에서는 필요가 없다.'''

''' [ 이스케이프 코드 ]

	\n : 개행(줄바꿈) (마지막 문자에서 엔터친거 바로 커서바로 밑으로감 )
	\r : 캐리지 리턴  ( 그 바로밑에간 커서를 젤앞으로 당겨줌)
	\" : 큰따옴표 출력 (")
	\' : 작음따옴표 출력(')
	\000 : 널(null)문자
	\t : 수평탭
	\\: '\'문자 표현('\')
	 
-- 문자열 연산 : 파이썬에서는 문자열을 더하고 곱할 수 있다.

[ 문자열 더하기 (concatenation) ]
 --> 문자열 + 문자열

[ 문자열 곱하기 ]
문자열 *숫자 는 문자열을 숫자 만큼 반복을 의미한다.
'''
a = "You've got"
b = " a freind"

print(a+b) #문자열 더하기

c = "hello"
print(c*3)

print("+"*30)
print("hello Python")
print("+"*30)

'''
--인덱싱과 슬라이싱
''' 
str = "You've got a friend"
 # 인덱싱 
print(str[4])

print(str[3])
print(str[6])
print(str[7])

print(str[13])

print(str[-1])
str1 = str[-6]+str[-5]+str[-4]+str[-3]+str[-2]+str[-1]

print(str1)

# 슬라이싱

str[-6:-1] #슬라이스 하겠다, 문장이나 단어를 잘라오겠다. 인덱스 -6에서 -1까지 
print(str[-1:-6]) # -1 은 d의 앞부분 위치를 의미하므로 역으로 써야함

print(str[-6:]) # 인덱스 -6에서부터 끝까지 슬라이스 한다.

print(str[0:4])
print(str[:3])
print(str[:]) # str 문자열 처음부터 끝까지 슬라이스 하겠다.

str = "20210104210620"
date = str[:8]  # : 슬라이스를 할때, 그자리의 숫자가 아니라 그 자리 앞 공간의 위치가 숫자의 순서이다.
time = str[8:]
year = date[:4]
day = date[6:8]
month = date[4:6]

print (date)
print (time)
print (year+"년")
print (day+"일")
print (month+"달")
print (year+"년"+month+"월"+day+"일")

#문자열의 교체방법
aa = "ABCD"
print(aa[1])

# aa[1] = 'F' 문자열, 튜플  자료형은 그 요소값을 변경할 수 없다.
# print(aa[1]) 

aa[:1]
print(aa[:1])
aa[2:]
print(aa[2:])

aa = aa[:1]+"F"+aa[2:]
print(aa)

''' 문자열 포맷(Format) : 문자열 내에 어떤 값을 변화시키는 방법

예 > 현재 날짜는 1월 5일 입니다.
   
   하루후,
     현재 날짜는 1월 6일 입니다.

'''
#숫자를 대입하는법.
# d= digit 의미
print( "제 나이는 %d살입니다." %23)

print( "제 나이는 %d살입니다." %24)

#문자열 대입
# s= string 의미
print("저의 이름은 %s입니다" %"김진섭")

print("저의 이름은 %s입니다" %"이강모")

# 숫자형 변수로 대입하기
age= 22
print("제 나이는 %d 살입니다."%age)

# 여러 개의 값을 대입하기
age= 23  
name="김진섭"
print("저의 이름은 %s 입니다. 나이는 %d 입니다." %(name,age))

''' 포맷 코드
%s : 문자열(string)를 의미한다.
%d : 정수(digit>Integer)
%f : 실수형(float)
%c : 문자(character 문자하나,이니셜 의미)
%o : 8진수
%x : 16진수
%% : Literal(진짜 문자그대로) %의미. ex.~~할 확률이 ~~%이다.

''' 

# print("완치될 확률은 %d% 입니다" %99) 안됨
print("완치될 확률은 %d%% 입니다" %99)

''' [포맷코드의 활용예]

소수점 표현하기 '''

print("%0.5f" %2.454545)  # 영쩜 다음에있는수가 나타낼 소수점 자리수 의미


 # 정렬과 공백처리
 # s앞 양수 오른쪽 정렬, s앞 음수 왼쪽정렬

print("%10s" %"Hello")
print("%-10s" %"Hello")

print("%-6sPython!!" %"Hello")

'''
# 3) 리스트(list)
	: 다른 언어의 배열과 같은 형태를 의미한다.
리스트의 예 (대괄호를 이용) > aa = [10, 20, 30] 
                       movies = ["백투더퓨처", "아이언맨", "1등"]
	                   bb = [10, 20, "백퓨", "아이언맨"]
					   cc = [10, 20, ["백퓨", "아이언맨"]]
					   dd = [] 빈리스트
   ** 리스트 내에는 어떠한 자료형도 포함시킬 수 있다.
[리스트의 인덱싱과 슬라이싱]
'''
aa = [10, 20, 30]
print(aa[0])  
print(aa)
print(aa[1]+aa[2])

print(aa[-1]) # 인덱스 값이 -인경우에는 뒤에서 부터 요소를 가르킨다.

bb = [10,20,30,["ab","cd","ef"]] #이중 리스트구조
print(bb[0])
print(bb[-1])
print(bb[3])

print(bb[-1][1])
	
cc= [10,20,["aa","bb","cc'",["백퓨","아이언맨"]]] # 삼중 리스트 구조

print(cc[2][3][1]) #삼중리스트구조에서 인덱싱 하기

# [리스트의 슬라이싱]
ab = [1, 10, 100, 1000, 10000]
print(ab[:3])

ab = "110100100010000"
print(ab[:3])

bc = [1, 10, 100, ["aa","bb","cc"],1000,10000]
print(bc[2:5])

print(bc[3][1:])

#리스트 연산 (+, *:반복을 의미)
aa = [10,20,30]
bb = [100,200,300]

print(aa+bb)

print(aa*2)

#리스트의 값을 변경하기

print(aa[1])

aa[1]=100 # 문자열, 튜플의 형의 요소값은 변경할 수 없지만, 하지만 리스트의 값은 변경할 수 있다.
print(aa)

print(aa[2:]) 

aa[2:] = ["국제시장", "명량"]
print(aa)

print(aa[1:3])

aa[1:3] = ["백", "천", "만"]
print(aa)

#착각하기 쉬운것.

aa[4]=["십만", "백만", "천만"] #하나의 요소만 선택하면 리스트형태로 들어간다. 단일리스트에서 이중리스트구조로.

print(aa)

aa[1:4]=[] # 요소 삭제 : 인덱스 1에서 4까지 지우는법.
print(aa)

del aa[0] # del함수를 이용한 삭제 방법 del(파이썬 내장함수) del 객체(모든 자료형)

print(aa)

'''
4) 튜플(tuple) : 리스트와 비슷한 자료형이다.
     - 리스트와 튜플의 차이점
   .리스트는 [], 튜플은 ()를 사용한다.
   .리스트는 요소의 변경(수정,삭제,생성)이 가능하지만, 튜플은 요소의 값을 변경할 수 없다.

   사용예>
   tu = () ---> 빈값이 들어있는 형태
   tu2 = (1,)
   tu3 = (10, 20, 30, 40)
   tu4 = 10, 20, 30
   tu5 = ("국제시장", "명량",("ab","cd"))

.튜플의 인덱싱, 슬라이싱, 연산
'''

tu = ('a','b','c',10,1000)
print(tu[0]) # 리스트와 동일

print(tu[2:])

tu2 = ('d', 'e', 'f')
print(tu+tu2)

print(tu*3)

# del tu2[2] #튜플은 문자열과 마찬가지로 요소를 변경하는 것을 허용하지않는다

